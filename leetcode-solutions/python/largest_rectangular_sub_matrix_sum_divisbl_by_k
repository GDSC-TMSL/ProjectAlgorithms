# Python implementation to find largest rectangular
# sub-matrix having sum divisible by k

start = 0
finish = 0

# function to find the longest subarray with sum divisible
# by k. The function stores starting and ending indexes of
# the subarray at addresses pointed by start and finish
# pointers respectively.
def longSubarrWthSumDivByK(arr, n, k):

	# unordered map 'um' implemented as
	# hash table

	global start,finish

	um = {}

	# 'mod_arr[i]' stores (sum[0..i] % k)
	mod_arr = [0 for i in range(n)]
	curr_sum,Max = 0,0

	# traverse arr[] and build up the
	# array 'mod_arr[]'
	for i in range(n):
		curr_sum += arr[i]

		# as the sum can be negative, taking modulo twice
		mod_arr[i] = ((curr_sum % k) + k) % k

	for i in range(n):

		# if true then sum(0..i) is divisible
		# by k
		if (mod_arr[i] == 0):

			# update variables
			max = i + 1
			start = 0
			finish = i

		# if value 'mod_arr[i]' not present in 'um'
		# then store it in 'um' with index of its
		# first occurrence
		elif (mod_arr[i] not in um):
			um[mod_arr[i]] = i

		else:
			# if true, then update variables
			if (Max < (i - um[mod_arr[i]])):
				Max = i - um[mod_arr[i]]
				start = um[mod_arr[i]] + 1
				finish = i

# function to find largest rectangular sub-matrix
# having sum divisible by k
def findLargestSubmatrix(mat, n, k):
	# Variables to store the final output
	finalLeft, finalRight, finalTop, finalBottom = 0,0,0,0

	left, right, i, maxArea = 0,0,0,0
	temp = [0 for i in range(n)]

	# Set the left column
	for left in range(n):

		# Set the right column for the left column
		# set by outer loop
		for right in range(left,n):

			# Calculate sum between current left and
			# right for every row 'i'
			for i in range(n):
				temp[i] += mat[i][right]

			# The longSubarrWthSumDivByK() function sets
			# the values of 'start' and 'finish'. So
			# submatrix having sum divisible by 'k' between
			# (start, left) and (finish, right) which is
			# the largest submatrix with boundary columns
			# strictly as left and right.
			longSubarrWthSumDivByK(temp, n, k)

			# Calculate current area and compare it with
			# maximum area so far. If maxArea is less, then
			# update maxArea and other output values
			if (maxArea < ((right - left + 1) * (finish - start + 1))):
				finalLeft = left
				finalRight = right
				finalTop = start
				finalBottom = finish
				maxArea = (right - left + 1) * (finish - start + 1)

	# Print final values
	print(f"(Top, Left): ({finalTop}, {finalLeft})")
	print(f"(Bottom, Right): ({finalBottom}, {finalRight})")
	print(f"Area: {maxArea}")

# Driver program to test above functions

mat = [ [ 1, 2, -1, -4 ],
		[ -8, -3, 4, 2 ],
		[ 3, 8, 10, 1 ],
		[ -4, -1, 1, 7 ] ]

n,k = 4,5
findLargestSubmatrix(mat, n, k)


